{"version":3,"sources":["index.tsx"],"names":["React","FontAwesomeIcon","FontAwesomeReact","FontAwesomeNative","Platform","StyleSheet","View","Native","size","props","Web","styles","flatten","height","width","Icon","style","OS"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAe,IAAIC,gBAA5B,QAAoD,gCAApD;AACA,SAASD,eAAe,IAAIE,iBAA5B,QAAqD,uCAArD;AAEA,SAASC,QAAT,EAA8BC,UAA9B,EAA0CC,IAA1C,QAAiE,cAAjE;;AAEA,MAAMC,MAEJ,GAAG,QAAwB;AAAA,MAAvB;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAAuB;AAC3B;AAAA;AACE;AACA,wBAAC,iBAAD,eACMA,KADN;AAEE,MAAA,IAAI,EAAED;AAFR;AAFF;AAMD,CATD;;AAWA,MAAME,GAEJ,GAAG,SAAwB;AAAA,MAAvB;AAAEF,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAAuB;AAC3B,QAAME,MAAM,GAAGN,UAAU,CAACO,OAAX,CAAmB,CAChC;AACEC,IAAAA,MAAM,EAAEL,IADV;AAEEM,IAAAA,KAAK,EAAEN;AAFT,GADgC,CAAnB,CAAf;AAOA;AAAA;AACE;AACA,wBAAC,gBAAD,eACMC,KADN;AAEE,MAAA,KAAK,EAAEE;AAFT;AAFF;AAMD,CAhBD;;AAkBA,MAAMI,IAKJ,GAAG,SAA+B;AAAA,MAA9B;AAAEP,IAAAA,IAAF;AAAQQ,IAAAA,KAAR;AAAe,OAAGP;AAAlB,GAA8B;AAClC,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEO;AAAb,KACGZ,QAAQ,CAACa,EAAT,KAAgB,KAAhB,iBAAyB,oBAAC,GAAD,eACpBR,KADoB;AAExB,IAAA,IAAI,EAAED;AAFkB,KAD5B,EAKGJ,QAAQ,CAACa,EAAT,KAAgB,KAAhB,iBAAyB,oBAAC,MAAD,eACpBR,KADoB;AAExB,IAAA,IAAI,EAAED;AAFkB,KAL5B,CADF;AAYD,CAlBD;;AAoBA,eAAeO,IAAf","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon as FontAwesomeReact } from '@fortawesome/react-fontawesome';\nimport { FontAwesomeIcon as FontAwesomeNative } from '@fortawesome/react-native-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nconst Native: React.FC<{\n  size: number;\n}> = ({ size, ...props }) => {\n  return (\n    // @ts-expect-error: size is passed as a param\n    <FontAwesomeNative\n      {...props}\n      size={size}\n    />);\n};\n\nconst Web: React.FC<{\n  size: number;\n}> = ({ size, ...props }) => {\n  const styles = StyleSheet.flatten([\n    {\n      height: size,\n      width: size,\n    },\n  ]);\n\n  return (\n    // @ts-expect-error: size is passed as a style\n    <FontAwesomeReact\n      {...props}\n      style={styles}\n    />);\n};\n\nconst Icon: React.FC<{\n  color: string;\n  icon: IconDefinition;\n  size: number;\n  style?: StyleProp<ViewStyle>;\n}> = ({ size, style, ...props }) => {\n  return (\n    <View style={style}>\n      {Platform.OS === 'web' && <Web\n        {...props}\n        size={size}\n      />}\n      {Platform.OS !== 'web' && <Native\n        {...props}\n        size={size}\n      />}\n    </View>\n  );\n};\n\nexport default Icon;\n"]}